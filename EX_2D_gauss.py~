import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter

fig = plt.figure()
ax = fig.gca(projection='3d')

def makeGaussian(size, x, y, fwhm = 3, center=None):
    """ Make a square gaussian kernel.

    size is the length of a side of the square
    fwhm is full-width-half-maximum, which
    can be thought of as an effective radius.
    """

    #x = np.arange(0, size, 1, float)
    #y = x[:,np.newaxis]

    if center is None:
        x0 = y0 = 0 #size // 2
    else:
        x0 = center[0]
        y0 = center[1]

    return np.exp(-4*np.log(2) * ((x-x0)**2 + (y-y0)**2) / fwhm**2)

N = 10000

x1 = np.random.uniform(-10, 10, N)
x2 = np.random.uniform(-10, 10, N)

X1, X2 = np.meshgrid(x1, x2)
hg = makeGaussian(N, X1, X2)

surf = ax.plot_surface(X1, X2, hg, cmap=cm.coolwarm, linewidth=0, antialiased=False)

#plt.plot(hg)
plt.show()
print(hg)

